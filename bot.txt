bot

bot.help((ctx) => {
  ctx.reply(`
⚙️ Available commands:
/wallet – Create your on-chain wallet
/balance – View your balances
/tip @user 10 VIBE – Tip tokens
/create_token – Mint your own token
`);
});


/wallet Command
Creates a wallet for the Telegram user.

bot.command('wallet', async (ctx) => {
  try {
    const telegramId = ctx.from.id;

    const res = await axios.post(`${API_BASE}/wallet`, { telegramId });
    const { wallet } = res.data;

    ctx.reply(`🪪 Wallet created!\n\n📬 Address: ${wallet.address}`);
  } catch (err) {
    console.error(err);
    ctx.reply('❌ Could not create your wallet.');
  }
});

/balance Command
Fetches balance by Telegram ID.

bot.command('balance', async (ctx) => {
  try {
    const telegramId = ctx.from.id;

    const res = await axios.get(`${API_BASE}/balance/${telegramId}`);
    const balances = res.data.balances;

    let reply = '💰 *Your Balances:*\n';
    for (const [token, amount] of Object.entries(balances)) {
      reply += `• ${token}: ${amount}\n`;
    }

    ctx.replyWithMarkdown(reply);
  } catch (err) {
    console.error(err);
    ctx.reply('❌ Could not fetch your balance.');
  }
});


/create_token Command
This one will use a prompt flow.

const userTokenCreationState = {};

bot.command('create_token', (ctx) => {
  const telegramId = ctx.from.id;
  userTokenCreationState[telegramId] = { step: 'name' };
  ctx.reply('🆕 Enter the token *name* (e.g., CoffeeCoin):');
});

bot.on('text', async (ctx) => {
  const telegramId = ctx.from.id;
  const state = userTokenCreationState[telegramId];

  if (!state) return;

  const input = ctx.message.text.trim();

  if (state.step === 'name') {
    state.name = input;
    state.step = 'symbol';
    ctx.reply('🔤 Enter the token *symbol* (e.g., $BREW):');
  } else if (state.step === 'symbol') {
    state.symbol = input.toUpperCase();
    state.step = 'supply';
    ctx.reply('🔢 Enter the *max supply* (e.g., 10000):');
  } else if (state.step === 'supply') {
    const supply = parseInt(input);
    if (isNaN(supply) || supply <= 0) {
      return ctx.reply('❗ Please enter a valid number for supply.');
    }

    // Ready to create token
    try {
      const res = await axios.post(`${API_BASE}/create-token`, {
        telegramId,
        name: state.name,
        symbol: state.symbol,
        supply
      });

      delete userTokenCreationState[telegramId];

      const token = res.data.token;
      ctx.reply(`✅ Token *${token.name}* ($${token.symbol}) created!\n🔗 Token ID: ${token.tokenId}`, { parse_mode: 'Markdown' });
    } catch (err) {
      console.error(err);
      ctx.reply('❌ Token creation failed.');
    }
  }
});


bot.command('tip', async (ctx) => {
  try {
    const message = ctx.message.text.trim();
    const parts = message.split(' ');

    if (parts.length !== 4) {
      return ctx.reply(
        `🚫 *Invalid usage!*\n\nTry:\n/tip @username 10 VIBE\n\n_Example:_ /tip @alice 5 COFFEE`,
        { parse_mode: 'Markdown' }
      );
    }

    const [_, mention, amountStr, tokenSymbol] = parts;

    if (!mention.startsWith('@')) {
      return ctx.reply(`❗ Please mention a user with @username.`);
    }

    const amount = parseFloat(amountStr);
    if (isNaN(amount) || amount <= 0) {
      return ctx.reply(`💡 Please enter a valid number greater than 0 for amount.`);
    }

    // Simulate sending tip
    const recipient = mention.replace('@', '');
    const sender = ctx.from.username || ctx.from.id;

    // Add a loading message
    await ctx.reply(`💸 Sending *${amount} ${tokenSymbol}* from @${sender} to @${recipient}...`, {
      parse_mode: 'Markdown',
    });

    // Simulate delay
    await new Promise((r) => setTimeout(r, 1000));

    // Mock tip success
    await ctx.reply(
      `✅ Tip sent!\n@${sender} just sent *${amount} ${tokenSymbol}* to @${recipient} 🎉`,
      { parse_mode: 'Markdown' }
    );
  } catch (err) {
    console.error(err);
    ctx.reply(`😓 Something went wrong. Try again later.`);
  }
});


import { Markup } from 'telegraf';

ctx.reply("🚀 Launch Mini App", Markup.inlineKeyboard([
  Markup.button.webApp("Open Wallet", "https://your-miniapp-url.com")
]));

bot.start((ctx) => {
  const name = ctx.from.first_name || ctx.from.username || 'there';
  console.log(chalk.green(`User started bot: ${ctx.from.username} (${ctx.from.id})`));

  ctx.reply(
`👋 Hello *${name}*, welcome to *HathorChat*!

🚀 We turn any Telegram group into a token-powered community—no crypto expertise needed.

Here’s what you can do:
• View your wallet → /wallet
• Tip someone → /tip @user 5 VIBE
• Create your own token → /create_token
• Earn badges & rewards → /my_badges
• Unlock content → /unlock

💡 Type /help to see the full list of commands.

_You’re ready to explore tokenized chat magic!_`,
    { parse_mode: 'Markdown' }
  );
});


bot.help((ctx) => {
  ctx.reply(
`🪙 *HathorChat Bot Help Menu*

Welcome to HathorChat – where tokenized communities come alive! Here’s what I can do for you:

⚙️ *Core Commands*
/start – Start the bot  
/help – Show this help menu  
/wallet – View your auto-provisioned HTR wallet  
/balance – Check your token + NFT balances  
/history – View your transaction history  

💸 *Token Features*
\`/tip @username amount token\` – Tip someone (e.g. \`/tip @alice 10 COFFEE\`)  
\`/create_token\` – Create your own custom token  
\`/send amount token @username\` – Send tokens directly  

🏆 *Rewards & Badges*
/my_badges – View your earned NFT badges  
/claim_badge – Manually claim badge if eligible  

🔒 *Token Gating*
/unlock – Unlock premium content  
/access – See what your tokens unlock  

📊 *Admin Tools* (Admins only)
/dashboard – Open Admin Dashboard  
/set_threshold – Set token thresholds  
/analytics – View token stats  

🎮 *Bonus Features*
/play_quiz – Play a quiz to earn tokens  
/raffle – Join a raffle  

_Questions? Ask @hathorsupport_`,
    { parse_mode: 'Markdown' }
  );
});



🧠 Your Flow (Rewritten with Clarity)
🟢 1. User sends /start
Bot replies:

👋 Welcome to HathorChat!
This is your gateway to tokenized communities 🪙

✅ Create a wallet
✅ Mint your own tokens
✅ Tip others
✅ Earn NFT badges

🔓 [Open Wallet Mini App]
Button opens Mini App (React UI inside Telegram).

🟢 2. User opens Mini App
You fetch their Telegram ID from initDataUnsafe.user.id

Backend auto-creates + stores their Hathor wallet (if not already exists)

You map:

telegram_id → wallet_address + encrypted_private_key
🟢 3. User goes back to bot
Bot can now:

Tip: /tip @user 5 VIBE → backend signs tx from stored wallet

View balance: /balance

Mint token: /create_token

Claim NFTs: automatic backend logic

Backend has secure access to user wallet → user doesn’t need to type anything after setup.

[ Telegram User ]
     ↓  (/start)
[ Telegram Bot ]
     ↓  (button)
[ Mini App WebView ]
     ↓  (calls /wallet?telegramId=123)
[ Backend ]
     → creates + stores wallet
     → returns address

Now:
- /tip → backend signs tx from stored privateKey
- /balance → backend fetches from wallet
- /create_token → signs and mints token


GET /api/token/:tokenId
{
  "tokenId": "abc123",
  "name": "CoffeeCoin",
  "symbol": "$BREW",
  "maxSupply": 10000,
  "currentSupply": 9975,
  "creator": "wallet-123",
  "logoUrl": "https://...",
  "holders": 122
}


GET /api/balance/:telegramId
{
  "HTR": 20,
  "$VIBE": 55,
  "$BREW": 0
}


User sees:

📮 Their wallet address
📦 Token balance
🪙 HTR balance

📌 Tip: “You need HTR to send tokens. Add funds by sending HTR to your address.”

You can even include:

 QR Code

 Fiat on-ramp


🛠 How to Implement This
🔷 Backend
Add endpoints:

GET /token/:tokenId
GET /token/holders/:tokenId
GET /balance/:telegramId
GET /wallet/:telegramId

🔷 Mini App
Build:

/my-wallet page
/token-details/:tokenId
/deposit page
/tip modal (select token + amount)

🔷 Bot
Add commands:

/balance → Summary of tokens
/tokeninfo $VIBE → Fetch and display token metadata
/topup → Shows user their wallet address


